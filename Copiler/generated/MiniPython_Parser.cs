//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Master/TEC/2024 Semestre II/Compiladores e Interpretes/Proyectos/mini-python/Copiler/MiniPython_Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniPython_Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, MULTILINE_COMMENT=3, DEF=4, RETURN=5, IF=6, ELSE=7, WHILE=8, 
		FOR=9, IN=10, PRINT=11, LEN=12, PLUS=13, MINUS=14, MULT=15, DIV=16, EQ=17, 
		NE=18, LT=19, LE=20, GT=21, GE=22, ASSIGN=23, LBRACK=24, RBRACK=25, LPAREN=26, 
		RPAREN=27, COLON=28, COMMA=29, INTEGER=30, FLOAT=31, STRING=32, CHAR=33, 
		IDENTIFIER=34, INDENT=35, DEDENT=36, NEWLINE=37;
	public const int
		RULE_program = 0, RULE_mainStatement = 1, RULE_statement = 2, RULE_defStatement = 3, 
		RULE_argList = 4, RULE_ifStatement = 5, RULE_whileStatement = 6, RULE_forStatement = 7, 
		RULE_returnStatement = 8, RULE_printStatement = 9, RULE_assignStatement = 10, 
		RULE_functionCallStatement = 11, RULE_sequence = 12, RULE_expression = 13, 
		RULE_comparison = 14, RULE_additionExpression = 15, RULE_multiplicationExpression = 16, 
		RULE_elementExpression = 17, RULE_expressionList = 18, RULE_primitiveExpression = 19, 
		RULE_listExpression = 20;
	public static readonly string[] ruleNames = {
		"program", "mainStatement", "statement", "defStatement", "argList", "ifStatement", 
		"whileStatement", "forStatement", "returnStatement", "printStatement", 
		"assignStatement", "functionCallStatement", "sequence", "expression", 
		"comparison", "additionExpression", "multiplicationExpression", "elementExpression", 
		"expressionList", "primitiveExpression", "listExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'def'", "'return'", "'if'", "'else'", "'while'", 
		"'for'", "'in'", "'print'", "'len'", "'+'", "'-'", "'*'", "'/'", "'=='", 
		"'!='", "'<'", "'<='", "'>'", "'>='", "'='", "'['", "']'", "'('", "')'", 
		"':'", "','", null, null, null, null, null, "'    '", "'<DEDENT>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "MULTILINE_COMMENT", "DEF", "RETURN", "IF", "ELSE", 
		"WHILE", "FOR", "IN", "PRINT", "LEN", "PLUS", "MINUS", "MULT", "DIV", 
		"EQ", "NE", "LT", "LE", "GT", "GE", "ASSIGN", "LBRACK", "RBRACK", "LPAREN", 
		"RPAREN", "COLON", "COMMA", "INTEGER", "FLOAT", "STRING", "CHAR", "IDENTIFIER", 
		"INDENT", "DEDENT", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniPython_Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniPython_Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniPython_Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniPython_Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniPython_Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainStatementContext[] mainStatement() {
			return GetRuleContexts<MainStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainStatementContext mainStatement(int i) {
			return GetRuleContext<MainStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEF || _la==IDENTIFIER) {
				{
				{
				State = 42;
				mainStatement();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefStatementContext defStatement() {
			return GetRuleContext<DefStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		public MainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainStatement; } }
	}

	[RuleVersion(0)]
	public MainStatementContext mainStatement() {
		MainStatementContext _localctx = new MainStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_mainStatement);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				defStatement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				assignStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefStatementContext defStatement() {
			return GetRuleContext<DefStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				defStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				returnStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57;
				printStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 58;
				whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 59;
				assignStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 60;
				functionCallStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(MiniPython_Parser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniPython_Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniPython_Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniPython_Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniPython_Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public DefStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defStatement; } }
	}

	[RuleVersion(0)]
	public DefStatementContext defStatement() {
		DefStatementContext _localctx = new DefStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_defStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(DEF);
			State = 64;
			Match(IDENTIFIER);
			State = 65;
			Match(LPAREN);
			State = 66;
			argList();
			State = 67;
			Match(RPAREN);
			State = 68;
			Match(COLON);
			State = 69;
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(MiniPython_Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(MiniPython_Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniPython_Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniPython_Parser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 8, RULE_argList);
		int _la;
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				Match(IDENTIFIER);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 72;
					Match(COMMA);
					State = 73;
					Match(IDENTIFIER);
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniPython_Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(MiniPython_Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(MiniPython_Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext[] sequence() {
			return GetRuleContexts<SequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence(int i) {
			return GetRuleContext<SequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniPython_Parser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(IF);
			State = 83;
			expression();
			State = 84;
			Match(COLON);
			State = 85;
			sequence();
			State = 86;
			Match(ELSE);
			State = 87;
			Match(COLON);
			State = 88;
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniPython_Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniPython_Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(WHILE);
			State = 91;
			expression();
			State = 92;
			Match(COLON);
			State = 93;
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniPython_Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MiniPython_Parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniPython_Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(FOR);
			State = 96;
			expression();
			State = 97;
			Match(IN);
			State = 98;
			expressionList();
			State = 99;
			Match(COLON);
			State = 100;
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniPython_Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MiniPython_Parser.NEWLINE, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(RETURN);
			State = 103;
			expression();
			State = 104;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(MiniPython_Parser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MiniPython_Parser.NEWLINE, 0); }
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(PRINT);
			State = 107;
			expression();
			State = 108;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniPython_Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniPython_Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MiniPython_Parser.NEWLINE, 0); }
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(IDENTIFIER);
			State = 111;
			Match(ASSIGN);
			State = 112;
			expression();
			State = 113;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniPython_Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniPython_Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MiniPython_Parser.NEWLINE, 0); }
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionCallStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			primitiveExpression();
			State = 116;
			Match(LPAREN);
			State = 117;
			expressionList();
			State = 118;
			Match(RPAREN);
			State = 119;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(MiniPython_Parser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(MiniPython_Parser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(INDENT);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 122;
				statement();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 33369905520L) != 0) );
			State = 127;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionExpressionContext additionExpression() {
			return GetRuleContext<AdditionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			additionExpression();
			State = 130;
			comparison();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionExpressionContext additionExpression() {
			return GetRuleContext<AdditionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MiniPython_Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MiniPython_Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(MiniPython_Parser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(MiniPython_Parser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MiniPython_Parser.EQ, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 28, RULE_comparison);
		int _la;
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQ:
			case LT:
			case LE:
			case GT:
			case GE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7995392L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 133;
				additionExpression();
				}
				break;
			case IN:
			case RBRACK:
			case RPAREN:
			case COLON:
			case COMMA:
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext[] multiplicationExpression() {
			return GetRuleContexts<MultiplicationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext multiplicationExpression(int i) {
			return GetRuleContext<MultiplicationExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(MiniPython_Parser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(MiniPython_Parser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MiniPython_Parser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MiniPython_Parser.MINUS, i);
		}
		public AdditionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionExpression; } }
	}

	[RuleVersion(0)]
	public AdditionExpressionContext additionExpression() {
		AdditionExpressionContext _localctx = new AdditionExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_additionExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			multiplicationExpression();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 138;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 139;
				multiplicationExpression();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementExpressionContext[] elementExpression() {
			return GetRuleContexts<ElementExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementExpressionContext elementExpression(int i) {
			return GetRuleContext<ElementExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(MiniPython_Parser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(MiniPython_Parser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(MiniPython_Parser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(MiniPython_Parser.DIV, i);
		}
		public MultiplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicationExpressionContext multiplicationExpression() {
		MultiplicationExpressionContext _localctx = new MultiplicationExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_multiplicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			elementExpression();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULT || _la==DIV) {
				{
				{
				State = 146;
				_la = TokenStream.LA(1);
				if ( !(_la==MULT || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 147;
				elementExpression();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniPython_Parser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniPython_Parser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniPython_Parser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniPython_Parser.RBRACK, i);
		}
		public ElementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementExpression; } }
	}

	[RuleVersion(0)]
	public ElementExpressionContext elementExpression() {
		ElementExpressionContext _localctx = new ElementExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_elementExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			primitiveExpression();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 154;
				Match(LBRACK);
				State = 155;
				expression();
				State = 156;
				Match(RBRACK);
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniPython_Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniPython_Parser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionList);
		int _la;
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEN:
			case MINUS:
			case LBRACK:
			case LPAREN:
			case INTEGER:
			case FLOAT:
			case STRING:
			case CHAR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				expression();
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 164;
					Match(COMMA);
					State = 165;
					expression();
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACK:
			case RPAREN:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MiniPython_Parser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniPython_Parser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MiniPython_Parser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MiniPython_Parser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniPython_Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniPython_Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniPython_Parser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListExpressionContext listExpression() {
			return GetRuleContext<ListExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(MiniPython_Parser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniPython_Parser.MINUS, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_primitiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 174;
				Match(MINUS);
				}
			}

			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				{
				State = 177;
				Match(INTEGER);
				}
				break;
			case FLOAT:
				{
				State = 178;
				Match(FLOAT);
				}
				break;
			case CHAR:
				{
				State = 179;
				Match(CHAR);
				}
				break;
			case STRING:
				{
				State = 180;
				Match(STRING);
				}
				break;
			case IDENTIFIER:
				{
				State = 181;
				Match(IDENTIFIER);
				}
				break;
			case LPAREN:
				{
				State = 182;
				Match(LPAREN);
				State = 183;
				expression();
				State = 184;
				Match(RPAREN);
				}
				break;
			case LBRACK:
				{
				State = 186;
				listExpression();
				}
				break;
			case LEN:
				{
				State = 187;
				Match(LEN);
				State = 188;
				Match(LPAREN);
				State = 189;
				expression();
				State = 190;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniPython_Parser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniPython_Parser.RBRACK, 0); }
		public ListExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listExpression; } }
	}

	[RuleVersion(0)]
	public ListExpressionContext listExpression() {
		ListExpressionContext _localctx = new ListExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_listExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(LBRACK);
			State = 195;
			expressionList();
			State = 196;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,37,199,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,5,0,44,
		8,0,10,0,12,0,47,9,0,1,0,1,0,1,1,1,1,3,1,53,8,1,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,3,2,62,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,5,4,75,8,
		4,10,4,12,4,78,9,4,1,4,3,4,81,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
		1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,
		9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		4,12,124,8,12,11,12,12,12,125,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,
		3,14,136,8,14,1,15,1,15,1,15,5,15,141,8,15,10,15,12,15,144,9,15,1,16,1,
		16,1,16,5,16,149,8,16,10,16,12,16,152,9,16,1,17,1,17,1,17,1,17,1,17,5,
		17,159,8,17,10,17,12,17,162,9,17,1,18,1,18,1,18,5,18,167,8,18,10,18,12,
		18,170,9,18,1,18,3,18,173,8,18,1,19,3,19,176,8,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,193,8,19,1,
		20,1,20,1,20,1,20,1,20,0,0,21,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,0,3,2,0,17,17,19,22,1,0,13,14,1,0,15,16,202,0,45,1,0,
		0,0,2,52,1,0,0,0,4,61,1,0,0,0,6,63,1,0,0,0,8,80,1,0,0,0,10,82,1,0,0,0,
		12,90,1,0,0,0,14,95,1,0,0,0,16,102,1,0,0,0,18,106,1,0,0,0,20,110,1,0,0,
		0,22,115,1,0,0,0,24,121,1,0,0,0,26,129,1,0,0,0,28,135,1,0,0,0,30,137,1,
		0,0,0,32,145,1,0,0,0,34,153,1,0,0,0,36,172,1,0,0,0,38,175,1,0,0,0,40,194,
		1,0,0,0,42,44,3,2,1,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,45,46,
		1,0,0,0,46,48,1,0,0,0,47,45,1,0,0,0,48,49,5,0,0,1,49,1,1,0,0,0,50,53,3,
		6,3,0,51,53,3,20,10,0,52,50,1,0,0,0,52,51,1,0,0,0,53,3,1,0,0,0,54,62,3,
		6,3,0,55,62,3,10,5,0,56,62,3,16,8,0,57,62,3,18,9,0,58,62,3,12,6,0,59,62,
		3,20,10,0,60,62,3,22,11,0,61,54,1,0,0,0,61,55,1,0,0,0,61,56,1,0,0,0,61,
		57,1,0,0,0,61,58,1,0,0,0,61,59,1,0,0,0,61,60,1,0,0,0,62,5,1,0,0,0,63,64,
		5,4,0,0,64,65,5,34,0,0,65,66,5,26,0,0,66,67,3,8,4,0,67,68,5,27,0,0,68,
		69,5,28,0,0,69,70,3,24,12,0,70,7,1,0,0,0,71,76,5,34,0,0,72,73,5,29,0,0,
		73,75,5,34,0,0,74,72,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,
		77,81,1,0,0,0,78,76,1,0,0,0,79,81,1,0,0,0,80,71,1,0,0,0,80,79,1,0,0,0,
		81,9,1,0,0,0,82,83,5,6,0,0,83,84,3,26,13,0,84,85,5,28,0,0,85,86,3,24,12,
		0,86,87,5,7,0,0,87,88,5,28,0,0,88,89,3,24,12,0,89,11,1,0,0,0,90,91,5,8,
		0,0,91,92,3,26,13,0,92,93,5,28,0,0,93,94,3,24,12,0,94,13,1,0,0,0,95,96,
		5,9,0,0,96,97,3,26,13,0,97,98,5,10,0,0,98,99,3,36,18,0,99,100,5,28,0,0,
		100,101,3,24,12,0,101,15,1,0,0,0,102,103,5,5,0,0,103,104,3,26,13,0,104,
		105,5,37,0,0,105,17,1,0,0,0,106,107,5,11,0,0,107,108,3,26,13,0,108,109,
		5,37,0,0,109,19,1,0,0,0,110,111,5,34,0,0,111,112,5,23,0,0,112,113,3,26,
		13,0,113,114,5,37,0,0,114,21,1,0,0,0,115,116,3,38,19,0,116,117,5,26,0,
		0,117,118,3,36,18,0,118,119,5,27,0,0,119,120,5,37,0,0,120,23,1,0,0,0,121,
		123,5,35,0,0,122,124,3,4,2,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,1,
		0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,128,5,36,0,0,128,25,1,0,0,0,
		129,130,3,30,15,0,130,131,3,28,14,0,131,27,1,0,0,0,132,133,7,0,0,0,133,
		136,3,30,15,0,134,136,1,0,0,0,135,132,1,0,0,0,135,134,1,0,0,0,136,29,1,
		0,0,0,137,142,3,32,16,0,138,139,7,1,0,0,139,141,3,32,16,0,140,138,1,0,
		0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,31,1,0,0,0,144,
		142,1,0,0,0,145,150,3,34,17,0,146,147,7,2,0,0,147,149,3,34,17,0,148,146,
		1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,33,1,0,0,0,
		152,150,1,0,0,0,153,160,3,38,19,0,154,155,5,24,0,0,155,156,3,26,13,0,156,
		157,5,25,0,0,157,159,1,0,0,0,158,154,1,0,0,0,159,162,1,0,0,0,160,158,1,
		0,0,0,160,161,1,0,0,0,161,35,1,0,0,0,162,160,1,0,0,0,163,168,3,26,13,0,
		164,165,5,29,0,0,165,167,3,26,13,0,166,164,1,0,0,0,167,170,1,0,0,0,168,
		166,1,0,0,0,168,169,1,0,0,0,169,173,1,0,0,0,170,168,1,0,0,0,171,173,1,
		0,0,0,172,163,1,0,0,0,172,171,1,0,0,0,173,37,1,0,0,0,174,176,5,14,0,0,
		175,174,1,0,0,0,175,176,1,0,0,0,176,192,1,0,0,0,177,193,5,30,0,0,178,193,
		5,31,0,0,179,193,5,33,0,0,180,193,5,32,0,0,181,193,5,34,0,0,182,183,5,
		26,0,0,183,184,3,26,13,0,184,185,5,27,0,0,185,193,1,0,0,0,186,193,3,40,
		20,0,187,188,5,12,0,0,188,189,5,26,0,0,189,190,3,26,13,0,190,191,5,27,
		0,0,191,193,1,0,0,0,192,177,1,0,0,0,192,178,1,0,0,0,192,179,1,0,0,0,192,
		180,1,0,0,0,192,181,1,0,0,0,192,182,1,0,0,0,192,186,1,0,0,0,192,187,1,
		0,0,0,193,39,1,0,0,0,194,195,5,24,0,0,195,196,3,36,18,0,196,197,5,25,0,
		0,197,41,1,0,0,0,14,45,52,61,76,80,125,135,142,150,160,168,172,175,192
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated
