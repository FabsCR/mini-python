//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/projects/mini-python/MiniPython/Parser/MiniPythonParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniPythonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, NEWLINE=3, COMMENT=4, MULTILINE_COMMENT=5, WS=6, PLUS=7, 
		MINUS=8, MUL=9, DIV=10, ASSIGN=11, EQ=12, NEQ=13, LT=14, GT=15, LTEQ=16, 
		GTEQ=17, LPAREN=18, RPAREN=19, LBRACKET=20, RBRACKET=21, COLON=22, COMMA=23, 
		DEF=24, IF=25, ELSE=26, WHILE=27, RETURN=28, PRINT=29, FOR=30, IN=31, 
		LEN=32, ID=33, INT=34, FLOAT=35, STRING=36;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_defStatement = 2, RULE_ifStatement = 3, 
		RULE_whileStatement = 4, RULE_forStatement = 5, RULE_returnStatement = 6, 
		RULE_printStatement = 7, RULE_assignStatement = 8, RULE_block = 9, RULE_expression = 10, 
		RULE_additionExpression = 11, RULE_multiplicationExpression = 12, RULE_primaryExpression = 13, 
		RULE_argList = 14;
	public static readonly string[] ruleNames = {
		"program", "statement", "defStatement", "ifStatement", "whileStatement", 
		"forStatement", "returnStatement", "printStatement", "assignStatement", 
		"block", "expression", "additionExpression", "multiplicationExpression", 
		"primaryExpression", "argList"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'('", "')'", "'['", 
		"']'", "':'", "','", "'def'", "'if'", "'else'", "'while'", "'return'", 
		"'print'", "'for'", "'in'", "'len'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NEWLINE", "COMMENT", "MULTILINE_COMMENT", "WS", 
		"PLUS", "MINUS", "MUL", "DIV", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LTEQ", 
		"GTEQ", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", "COMMA", 
		"DEF", "IF", "ELSE", "WHILE", "RETURN", "PRINT", "FOR", "IN", "LEN", "ID", 
		"INT", "FLOAT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniPythonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniPythonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniPythonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniPythonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniPythonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 30;
				statement();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 10653532160L) != 0) );
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefStatementContext defStatement() {
			return GetRuleContext<DefStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37;
				defStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				ifStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 39;
				whileStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 40;
				forStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 41;
				returnStatement();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 42;
				printStatement();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 7);
				{
				State = 43;
				assignStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(MiniPythonParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniPythonParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniPythonParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniPythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public DefStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defStatement; } }
	}

	[RuleVersion(0)]
	public DefStatementContext defStatement() {
		DefStatementContext _localctx = new DefStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_defStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(DEF);
			State = 47;
			Match(ID);
			State = 48;
			Match(LPAREN);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 49;
				argList();
				}
			}

			State = 52;
			Match(RPAREN);
			State = 53;
			Match(COLON);
			State = 54;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniPythonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(MiniPythonParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(MiniPythonParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniPythonParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(IF);
			State = 57;
			expression();
			State = 58;
			Match(COLON);
			State = 59;
			block();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 60;
				Match(ELSE);
				State = 61;
				Match(COLON);
				State = 62;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniPythonParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniPythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(WHILE);
			State = 66;
			expression();
			State = 67;
			Match(COLON);
			State = 68;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniPythonParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MiniPythonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MiniPythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(FOR);
			State = 71;
			Match(ID);
			State = 72;
			Match(IN);
			State = 73;
			expression();
			State = 74;
			Match(COLON);
			State = 75;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniPythonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(RETURN);
			State = 78;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(MiniPythonParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(PRINT);
			State = 81;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniPythonParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(ID);
			State = 84;
			Match(ASSIGN);
			State = 85;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(MiniPythonParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(MiniPythonParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(INDENT);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 88;
				statement();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 10653532160L) != 0) );
			State = 93;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionExpressionContext[] additionExpression() {
			return GetRuleContexts<AdditionExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionExpressionContext additionExpression(int i) {
			return GetRuleContext<AdditionExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MiniPythonParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MiniPythonParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MiniPythonParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(MiniPythonParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(MiniPythonParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(MiniPythonParser.GTEQ, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			additionExpression();
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 258048L) != 0)) {
				{
				State = 96;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 258048L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 97;
				additionExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext[] multiplicationExpression() {
			return GetRuleContexts<MultiplicationExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext multiplicationExpression(int i) {
			return GetRuleContext<MultiplicationExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(MiniPythonParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(MiniPythonParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MiniPythonParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MiniPythonParser.MINUS, i);
		}
		public AdditionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionExpression; } }
	}

	[RuleVersion(0)]
	public AdditionExpressionContext additionExpression() {
		AdditionExpressionContext _localctx = new AdditionExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_additionExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			multiplicationExpression();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 101;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 102;
				multiplicationExpression();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext[] primaryExpression() {
			return GetRuleContexts<PrimaryExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression(int i) {
			return GetRuleContext<PrimaryExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(MiniPythonParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(MiniPythonParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(MiniPythonParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(MiniPythonParser.DIV, i);
		}
		public MultiplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicationExpressionContext multiplicationExpression() {
		MultiplicationExpressionContext _localctx = new MultiplicationExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_multiplicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			primaryExpression();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MUL || _la==DIV) {
				{
				{
				State = 109;
				_la = TokenStream.LA(1);
				if ( !(_la==MUL || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 110;
				primaryExpression();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniPythonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniPythonParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MiniPythonParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniPythonParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniPythonParser.RPAREN, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_primaryExpression);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				Match(FLOAT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118;
				Match(STRING);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 119;
				Match(ID);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 120;
				Match(LPAREN);
				State = 121;
				expression();
				State = 122;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniPythonParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniPythonParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniPythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniPythonParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 28, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(ID);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 127;
				Match(COMMA);
				State = 128;
				Match(ID);
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,135,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,4,0,32,8,0,11,0,12,0,33,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,45,
		8,1,1,2,1,2,1,2,1,2,3,2,51,8,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,3,3,64,8,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
		1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,4,9,90,8,9,11,9,12,9,91,1,9,1,
		9,1,10,1,10,1,10,3,10,99,8,10,1,11,1,11,1,11,5,11,104,8,11,10,11,12,11,
		107,9,11,1,12,1,12,1,12,5,12,112,8,12,10,12,12,12,115,9,12,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,3,13,125,8,13,1,14,1,14,1,14,5,14,130,8,14,
		10,14,12,14,133,9,14,1,14,0,0,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,0,3,1,0,12,17,1,0,7,8,1,0,9,10,137,0,31,1,0,0,0,2,44,1,0,0,0,4,46,1,
		0,0,0,6,56,1,0,0,0,8,65,1,0,0,0,10,70,1,0,0,0,12,77,1,0,0,0,14,80,1,0,
		0,0,16,83,1,0,0,0,18,87,1,0,0,0,20,95,1,0,0,0,22,100,1,0,0,0,24,108,1,
		0,0,0,26,124,1,0,0,0,28,126,1,0,0,0,30,32,3,2,1,0,31,30,1,0,0,0,32,33,
		1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,35,1,0,0,0,35,36,5,0,0,1,36,1,1,
		0,0,0,37,45,3,4,2,0,38,45,3,6,3,0,39,45,3,8,4,0,40,45,3,10,5,0,41,45,3,
		12,6,0,42,45,3,14,7,0,43,45,3,16,8,0,44,37,1,0,0,0,44,38,1,0,0,0,44,39,
		1,0,0,0,44,40,1,0,0,0,44,41,1,0,0,0,44,42,1,0,0,0,44,43,1,0,0,0,45,3,1,
		0,0,0,46,47,5,24,0,0,47,48,5,33,0,0,48,50,5,18,0,0,49,51,3,28,14,0,50,
		49,1,0,0,0,50,51,1,0,0,0,51,52,1,0,0,0,52,53,5,19,0,0,53,54,5,22,0,0,54,
		55,3,18,9,0,55,5,1,0,0,0,56,57,5,25,0,0,57,58,3,20,10,0,58,59,5,22,0,0,
		59,63,3,18,9,0,60,61,5,26,0,0,61,62,5,22,0,0,62,64,3,18,9,0,63,60,1,0,
		0,0,63,64,1,0,0,0,64,7,1,0,0,0,65,66,5,27,0,0,66,67,3,20,10,0,67,68,5,
		22,0,0,68,69,3,18,9,0,69,9,1,0,0,0,70,71,5,30,0,0,71,72,5,33,0,0,72,73,
		5,31,0,0,73,74,3,20,10,0,74,75,5,22,0,0,75,76,3,18,9,0,76,11,1,0,0,0,77,
		78,5,28,0,0,78,79,3,20,10,0,79,13,1,0,0,0,80,81,5,29,0,0,81,82,3,20,10,
		0,82,15,1,0,0,0,83,84,5,33,0,0,84,85,5,11,0,0,85,86,3,20,10,0,86,17,1,
		0,0,0,87,89,5,1,0,0,88,90,3,2,1,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,
		0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,94,5,2,0,0,94,19,1,0,0,0,95,98,3,
		22,11,0,96,97,7,0,0,0,97,99,3,22,11,0,98,96,1,0,0,0,98,99,1,0,0,0,99,21,
		1,0,0,0,100,105,3,24,12,0,101,102,7,1,0,0,102,104,3,24,12,0,103,101,1,
		0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,23,1,0,0,0,107,
		105,1,0,0,0,108,113,3,26,13,0,109,110,7,2,0,0,110,112,3,26,13,0,111,109,
		1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,25,1,0,0,0,
		115,113,1,0,0,0,116,125,5,34,0,0,117,125,5,35,0,0,118,125,5,36,0,0,119,
		125,5,33,0,0,120,121,5,18,0,0,121,122,3,20,10,0,122,123,5,19,0,0,123,125,
		1,0,0,0,124,116,1,0,0,0,124,117,1,0,0,0,124,118,1,0,0,0,124,119,1,0,0,
		0,124,120,1,0,0,0,125,27,1,0,0,0,126,131,5,33,0,0,127,128,5,23,0,0,128,
		130,5,33,0,0,129,127,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,
		0,0,0,132,29,1,0,0,0,133,131,1,0,0,0,10,33,44,50,63,91,98,105,113,124,
		131
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
