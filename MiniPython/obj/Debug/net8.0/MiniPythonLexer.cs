//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/fabs/RiderProjects/MiniPython/MiniPython/MiniPythonLexer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniPython {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniPythonLexer : Lexer {
	public const int
		INDENT=1, DEDENT=2, NEWLINE=3, COMMENT=4, MULTILINE_COMMENT=5, WS=6, PLUS=7, 
		MINUS=8, MUL=9, DIV=10, ASSIGN=11, EQ=12, NEQ=13, LT=14, GT=15, LTEQ=16, 
		GTEQ=17, LPAREN=18, RPAREN=19, LBRACKET=20, RBRACKET=21, COLON=22, COMMA=23, 
		DEF=24, IF=25, ELSE=26, WHILE=27, RETURN=28, PRINT=29, FOR=30, IN=31, 
		LEN=32, ID=33, INT=34, FLOAT=35, STRING=36;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INDENT", "DEDENT", "NEWLINE", "COMMENT", "MULTILINE_COMMENT", "WS", "PLUS", 
		"MINUS", "MUL", "DIV", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LTEQ", "GTEQ", 
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", "COMMA", "DEF", "IF", 
		"ELSE", "WHILE", "RETURN", "PRINT", "FOR", "IN", "LEN", "ID", "INT", "FLOAT", 
		"STRING"
	};


	public MiniPythonLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'('", "')'", "'['", 
		"']'", "':'", "','", "'def'", "'if'", "'else'", "'while'", "'return'", 
		"'print'", "'for'", "'in'", "'len'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NEWLINE", "COMMENT", "MULTILINE_COMMENT", "WS", 
		"PLUS", "MINUS", "MUL", "DIV", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LTEQ", 
		"GTEQ", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", "COMMA", 
		"DEF", "IF", "ELSE", "WHILE", "RETURN", "PRINT", "FOR", "IN", "LEN", "ID", 
		"INT", "FLOAT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniPythonLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2&\xF0\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x3\x2\x6\x2M\n\x2\r\x2\xE\x2N\x3\x2"+
		"\x3\x2\x3\x3\x6\x3T\n\x3\r\x3\xE\x3U\x3\x3\x3\x3\x3\x4\x6\x4[\n\x4\r\x4"+
		"\xE\x4\\\x3\x4\x3\x4\x3\x5\x3\x5\a\x5\x63\n\x5\f\x5\xE\x5\x66\v\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6o\n\x6\f\x6\xE\x6r\v\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x6\a{\n\a\r\a\xE\a|\x3\a\x3\a\x3"+
		"\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17"+
		"\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3"+
		"!\x3!\x3!\x3!\x3\"\x3\"\a\"\xD3\n\"\f\"\xE\"\xD6\v\"\x3#\x6#\xD9\n#\r"+
		"#\xE#\xDA\x3$\x6$\xDE\n$\r$\xE$\xDF\x3$\x3$\x6$\xE4\n$\r$\xE$\xE5\x3%"+
		"\x3%\a%\xEA\n%\f%\xE%\xED\v%\x3%\x3%\x4p\xEB\x2\x2&\x3\x2\x3\x5\x2\x4"+
		"\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17"+
		"\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14"+
		"\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2"+
		"\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$"+
		"G\x2%I\x2&\x3\x2\b\x3\x2\v\v\x4\x2\f\f\xF\xF\x5\x2\v\f\xF\xF\"\"\x5\x2"+
		"\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x3\x2\x32;\xFA\x2\x3"+
		"\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v"+
		"\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2"+
		"\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2"+
		"\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2"+
		"\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2"+
		"\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2"+
		"\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2"+
		"\x3L\x3\x2\x2\x2\x5S\x3\x2\x2\x2\aZ\x3\x2\x2\x2\t`\x3\x2\x2\x2\vi\x3\x2"+
		"\x2\x2\rz\x3\x2\x2\x2\xF\x80\x3\x2\x2\x2\x11\x82\x3\x2\x2\x2\x13\x84\x3"+
		"\x2\x2\x2\x15\x86\x3\x2\x2\x2\x17\x88\x3\x2\x2\x2\x19\x8A\x3\x2\x2\x2"+
		"\x1B\x8D\x3\x2\x2\x2\x1D\x90\x3\x2\x2\x2\x1F\x92\x3\x2\x2\x2!\x94\x3\x2"+
		"\x2\x2#\x97\x3\x2\x2\x2%\x9A\x3\x2\x2\x2\'\x9C\x3\x2\x2\x2)\x9E\x3\x2"+
		"\x2\x2+\xA0\x3\x2\x2\x2-\xA2\x3\x2\x2\x2/\xA4\x3\x2\x2\x2\x31\xA6\x3\x2"+
		"\x2\x2\x33\xAA\x3\x2\x2\x2\x35\xAD\x3\x2\x2\x2\x37\xB2\x3\x2\x2\x2\x39"+
		"\xB8\x3\x2\x2\x2;\xBF\x3\x2\x2\x2=\xC5\x3\x2\x2\x2?\xC9\x3\x2\x2\x2\x41"+
		"\xCC\x3\x2\x2\x2\x43\xD0\x3\x2\x2\x2\x45\xD8\x3\x2\x2\x2G\xDD\x3\x2\x2"+
		"\x2I\xE7\x3\x2\x2\x2KM\t\x2\x2\x2LK\x3\x2\x2\x2MN\x3\x2\x2\x2NL\x3\x2"+
		"\x2\x2NO\x3\x2\x2\x2OP\x3\x2\x2\x2PQ\b\x2\x2\x2Q\x4\x3\x2\x2\x2RT\t\x3"+
		"\x2\x2SR\x3\x2\x2\x2TU\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2VW\x3\x2"+
		"\x2\x2WX\b\x3\x2\x2X\x6\x3\x2\x2\x2Y[\t\x3\x2\x2ZY\x3\x2\x2\x2[\\\x3\x2"+
		"\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\x3\x2\x2\x2^_\b\x4\x2\x2_\b\x3"+
		"\x2\x2\x2`\x64\a%\x2\x2\x61\x63\n\x3\x2\x2\x62\x61\x3\x2\x2\x2\x63\x66"+
		"\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65g\x3\x2\x2\x2"+
		"\x66\x64\x3\x2\x2\x2gh\b\x5\x3\x2h\n\x3\x2\x2\x2ij\a$\x2\x2jk\a$\x2\x2"+
		"kl\a$\x2\x2lp\x3\x2\x2\x2mo\v\x2\x2\x2nm\x3\x2\x2\x2or\x3\x2\x2\x2pq\x3"+
		"\x2\x2\x2pn\x3\x2\x2\x2qs\x3\x2\x2\x2rp\x3\x2\x2\x2st\a$\x2\x2tu\a$\x2"+
		"\x2uv\a$\x2\x2vw\x3\x2\x2\x2wx\b\x6\x3\x2x\f\x3\x2\x2\x2y{\t\x4\x2\x2"+
		"zy\x3\x2\x2\x2{|\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}~\x3\x2\x2\x2"+
		"~\x7F\b\a\x3\x2\x7F\xE\x3\x2\x2\x2\x80\x81\a-\x2\x2\x81\x10\x3\x2\x2\x2"+
		"\x82\x83\a/\x2\x2\x83\x12\x3\x2\x2\x2\x84\x85\a,\x2\x2\x85\x14\x3\x2\x2"+
		"\x2\x86\x87\a\x31\x2\x2\x87\x16\x3\x2\x2\x2\x88\x89\a?\x2\x2\x89\x18\x3"+
		"\x2\x2\x2\x8A\x8B\a?\x2\x2\x8B\x8C\a?\x2\x2\x8C\x1A\x3\x2\x2\x2\x8D\x8E"+
		"\a#\x2\x2\x8E\x8F\a?\x2\x2\x8F\x1C\x3\x2\x2\x2\x90\x91\a>\x2\x2\x91\x1E"+
		"\x3\x2\x2\x2\x92\x93\a@\x2\x2\x93 \x3\x2\x2\x2\x94\x95\a>\x2\x2\x95\x96"+
		"\a?\x2\x2\x96\"\x3\x2\x2\x2\x97\x98\a@\x2\x2\x98\x99\a?\x2\x2\x99$\x3"+
		"\x2\x2\x2\x9A\x9B\a*\x2\x2\x9B&\x3\x2\x2\x2\x9C\x9D\a+\x2\x2\x9D(\x3\x2"+
		"\x2\x2\x9E\x9F\a]\x2\x2\x9F*\x3\x2\x2\x2\xA0\xA1\a_\x2\x2\xA1,\x3\x2\x2"+
		"\x2\xA2\xA3\a<\x2\x2\xA3.\x3\x2\x2\x2\xA4\xA5\a.\x2\x2\xA5\x30\x3\x2\x2"+
		"\x2\xA6\xA7\a\x66\x2\x2\xA7\xA8\ag\x2\x2\xA8\xA9\ah\x2\x2\xA9\x32\x3\x2"+
		"\x2\x2\xAA\xAB\ak\x2\x2\xAB\xAC\ah\x2\x2\xAC\x34\x3\x2\x2\x2\xAD\xAE\a"+
		"g\x2\x2\xAE\xAF\an\x2\x2\xAF\xB0\au\x2\x2\xB0\xB1\ag\x2\x2\xB1\x36\x3"+
		"\x2\x2\x2\xB2\xB3\ay\x2\x2\xB3\xB4\aj\x2\x2\xB4\xB5\ak\x2\x2\xB5\xB6\a"+
		"n\x2\x2\xB6\xB7\ag\x2\x2\xB7\x38\x3\x2\x2\x2\xB8\xB9\at\x2\x2\xB9\xBA"+
		"\ag\x2\x2\xBA\xBB\av\x2\x2\xBB\xBC\aw\x2\x2\xBC\xBD\at\x2\x2\xBD\xBE\a"+
		"p\x2\x2\xBE:\x3\x2\x2\x2\xBF\xC0\ar\x2\x2\xC0\xC1\at\x2\x2\xC1\xC2\ak"+
		"\x2\x2\xC2\xC3\ap\x2\x2\xC3\xC4\av\x2\x2\xC4<\x3\x2\x2\x2\xC5\xC6\ah\x2"+
		"\x2\xC6\xC7\aq\x2\x2\xC7\xC8\at\x2\x2\xC8>\x3\x2\x2\x2\xC9\xCA\ak\x2\x2"+
		"\xCA\xCB\ap\x2\x2\xCB@\x3\x2\x2\x2\xCC\xCD\an\x2\x2\xCD\xCE\ag\x2\x2\xCE"+
		"\xCF\ap\x2\x2\xCF\x42\x3\x2\x2\x2\xD0\xD4\t\x5\x2\x2\xD1\xD3\t\x6\x2\x2"+
		"\xD2\xD1\x3\x2\x2\x2\xD3\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3"+
		"\x2\x2\x2\xD5\x44\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD7\xD9\t\a\x2\x2\xD8"+
		"\xD7\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3\x2"+
		"\x2\x2\xDB\x46\x3\x2\x2\x2\xDC\xDE\t\a\x2\x2\xDD\xDC\x3\x2\x2\x2\xDE\xDF"+
		"\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\x3\x2\x2"+
		"\x2\xE1\xE3\a\x30\x2\x2\xE2\xE4\t\a\x2\x2\xE3\xE2\x3\x2\x2\x2\xE4\xE5"+
		"\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6H\x3\x2\x2\x2"+
		"\xE7\xEB\a$\x2\x2\xE8\xEA\v\x2\x2\x2\xE9\xE8\x3\x2\x2\x2\xEA\xED\x3\x2"+
		"\x2\x2\xEB\xEC\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEC\xEE\x3\x2\x2\x2\xED"+
		"\xEB\x3\x2\x2\x2\xEE\xEF\a$\x2\x2\xEFJ\x3\x2\x2\x2\xE\x2NU\\\x64p|\xD4"+
		"\xDA\xDF\xE5\xEB\x4\x2\x3\x2\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniPython
