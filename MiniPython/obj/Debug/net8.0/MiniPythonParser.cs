//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/fabs/RiderProjects/MiniPython/MiniPython/MiniPythonParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniPython {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniPythonParser : Parser {
	public const int
		INDENT=1, DEDENT=2, NEWLINE=3, COMMENT=4, MULTILINE_COMMENT=5, WS=6, PLUS=7, 
		MINUS=8, MUL=9, DIV=10, ASSIGN=11, EQ=12, NEQ=13, LT=14, GT=15, LTEQ=16, 
		GTEQ=17, LPAREN=18, RPAREN=19, LBRACKET=20, RBRACKET=21, COLON=22, COMMA=23, 
		DEF=24, IF=25, ELSE=26, WHILE=27, RETURN=28, PRINT=29, FOR=30, IN=31, 
		LEN=32, ID=33, INT=34, FLOAT=35, STRING=36;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_defStatement = 2, RULE_ifStatement = 3, 
		RULE_whileStatement = 4, RULE_forStatement = 5, RULE_returnStatement = 6, 
		RULE_printStatement = 7, RULE_assignStatement = 8, RULE_block = 9, RULE_expression = 10, 
		RULE_additionExpression = 11, RULE_multiplicationExpression = 12, RULE_primaryExpression = 13, 
		RULE_argList = 14;
	public static readonly string[] ruleNames = {
		"program", "statement", "defStatement", "ifStatement", "whileStatement", 
		"forStatement", "returnStatement", "printStatement", "assignStatement", 
		"block", "expression", "additionExpression", "multiplicationExpression", 
		"primaryExpression", "argList"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", 
		"'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'('", "')'", "'['", 
		"']'", "':'", "','", "'def'", "'if'", "'else'", "'while'", "'return'", 
		"'print'", "'for'", "'in'", "'len'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NEWLINE", "COMMENT", "MULTILINE_COMMENT", "WS", 
		"PLUS", "MINUS", "MUL", "DIV", "ASSIGN", "EQ", "NEQ", "LT", "GT", "LTEQ", 
		"GTEQ", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COLON", "COMMA", 
		"DEF", "IF", "ELSE", "WHILE", "RETURN", "PRINT", "FOR", "IN", "LEN", "ID", 
		"INT", "FLOAT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniPythonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MiniPythonParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MiniPythonParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 30; statement();
				}
				}
				State = 33;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEF) | (1L << IF) | (1L << WHILE) | (1L << RETURN) | (1L << PRINT) | (1L << FOR) | (1L << ID))) != 0) );
			State = 35; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DefStatementContext defStatement() {
			return GetRuleContext<DefStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 44;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DEF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; defStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38; ifStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 39; whileStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 40; forStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 41; returnStatement();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 42; printStatement();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 7);
				{
				State = 43; assignStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefStatementContext : ParserRuleContext {
		public ITerminalNode DEF() { return GetToken(MiniPythonParser.DEF, 0); }
		public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(MiniPythonParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(MiniPythonParser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(MiniPythonParser.COLON, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public DefStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterDefStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitDefStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefStatementContext defStatement() {
		DefStatementContext _localctx = new DefStatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_defStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(DEF);
			State = 47; Match(ID);
			State = 48; Match(LPAREN);
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 49; argList();
				}
			}

			State = 52; Match(RPAREN);
			State = 53; Match(COLON);
			State = 54; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MiniPythonParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] COLON() { return GetTokens(MiniPythonParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(MiniPythonParser.COLON, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MiniPythonParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(IF);
			State = 57; expression();
			State = 58; Match(COLON);
			State = 59; block();
			State = 60; Match(ELSE);
			State = 61; Match(COLON);
			State = 62; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(MiniPythonParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(MiniPythonParser.COLON, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(WHILE);
			State = 65; expression();
			State = 66; Match(COLON);
			State = 67; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(MiniPythonParser.FOR, 0); }
		public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		public ITerminalNode IN() { return GetToken(MiniPythonParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(MiniPythonParser.COLON, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(FOR);
			State = 70; Match(ID);
			State = 71; Match(IN);
			State = 72; expression();
			State = 73; Match(COLON);
			State = 74; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(MiniPythonParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(RETURN);
			State = 77; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(MiniPythonParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(PRINT);
			State = 80; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MiniPythonParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_assignStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(ID);
			State = 83; Match(ASSIGN);
			State = 84; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(MiniPythonParser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(MiniPythonParser.DEDENT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(INDENT);
			State = 88;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 87; statement();
				}
				}
				State = 90;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEF) | (1L << IF) | (1L << WHILE) | (1L << RETURN) | (1L << PRINT) | (1L << FOR) | (1L << ID))) != 0) );
			State = 92; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AdditionExpressionContext[] additionExpression() {
			return GetRuleContexts<AdditionExpressionContext>();
		}
		public AdditionExpressionContext additionExpression(int i) {
			return GetRuleContext<AdditionExpressionContext>(i);
		}
		public ITerminalNode LT() { return GetToken(MiniPythonParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(MiniPythonParser.GT, 0); }
		public ITerminalNode EQ() { return GetToken(MiniPythonParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(MiniPythonParser.NEQ, 0); }
		public ITerminalNode LTEQ() { return GetToken(MiniPythonParser.LTEQ, 0); }
		public ITerminalNode GTEQ() { return GetToken(MiniPythonParser.GTEQ, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; additionExpression();
			State = 97;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << LT) | (1L << GT) | (1L << LTEQ) | (1L << GTEQ))) != 0)) {
				{
				State = 95;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << LT) | (1L << GT) | (1L << LTEQ) | (1L << GTEQ))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 96; additionExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionExpressionContext : ParserRuleContext {
		public MultiplicationExpressionContext[] multiplicationExpression() {
			return GetRuleContexts<MultiplicationExpressionContext>();
		}
		public MultiplicationExpressionContext multiplicationExpression(int i) {
			return GetRuleContext<MultiplicationExpressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(MiniPythonParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(MiniPythonParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(MiniPythonParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(MiniPythonParser.MINUS, i);
		}
		public AdditionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionExpressionContext additionExpression() {
		AdditionExpressionContext _localctx = new AdditionExpressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_additionExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; multiplicationExpression();
			State = 104;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 100;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 101; multiplicationExpression();
				}
				}
				State = 106;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext[] primaryExpression() {
			return GetRuleContexts<PrimaryExpressionContext>();
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return GetRuleContext<PrimaryExpressionContext>(i);
		}
		public ITerminalNode[] MUL() { return GetTokens(MiniPythonParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(MiniPythonParser.MUL, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(MiniPythonParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(MiniPythonParser.DIV, i);
		}
		public MultiplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationExpressionContext multiplicationExpression() {
		MultiplicationExpressionContext _localctx = new MultiplicationExpressionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_multiplicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; primaryExpression();
			State = 112;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MUL || _la==DIV) {
				{
				{
				State = 108;
				_la = _input.La(1);
				if ( !(_la==MUL || _la==DIV) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 109; primaryExpression();
				}
				}
				State = 114;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(MiniPythonParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(MiniPythonParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(MiniPythonParser.STRING, 0); }
		public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(MiniPythonParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MiniPythonParser.RPAREN, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_primaryExpression);
		try {
			State = 123;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(FLOAT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 117; Match(STRING);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 118; Match(ID);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 119; Match(LPAREN);
				State = 120; expression();
				State = 121; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(MiniPythonParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MiniPythonParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniPythonParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniPythonParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniPythonParserListener typedListener = listener as IMiniPythonParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniPythonParserVisitor<TResult> typedVisitor = visitor as IMiniPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(ID);
			State = 130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 126; Match(COMMA);
				State = 127; Match(ID);
				}
				}
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3&\x88\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x3\x2\x6\x2\"\n\x2\r\x2\xE\x2#\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x5\x3/\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x35\n\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x6\v[\n\v\r"+
		"\v\xE\v\\\x3\v\x3\v\x3\f\x3\f\x3\f\x5\f\x64\n\f\x3\r\x3\r\x3\r\a\ri\n"+
		"\r\f\r\xE\rl\v\r\x3\xE\x3\xE\x3\xE\a\xEq\n\xE\f\xE\xE\xEt\v\xE\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF~\n\xF\x3\x10\x3\x10\x3\x10"+
		"\a\x10\x83\n\x10\f\x10\xE\x10\x86\v\x10\x3\x10\x2\x2\x2\x11\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2\x2\x5\x3\x2\xE\x13\x3\x2\t\n\x3\x2\v\f\x89\x2!\x3\x2\x2"+
		"\x2\x4.\x3\x2\x2\x2\x6\x30\x3\x2\x2\x2\b:\x3\x2\x2\x2\n\x42\x3\x2\x2\x2"+
		"\fG\x3\x2\x2\x2\xEN\x3\x2\x2\x2\x10Q\x3\x2\x2\x2\x12T\x3\x2\x2\x2\x14"+
		"X\x3\x2\x2\x2\x16`\x3\x2\x2\x2\x18\x65\x3\x2\x2\x2\x1Am\x3\x2\x2\x2\x1C"+
		"}\x3\x2\x2\x2\x1E\x7F\x3\x2\x2\x2 \"\x5\x4\x3\x2! \x3\x2\x2\x2\"#\x3\x2"+
		"\x2\x2#!\x3\x2\x2\x2#$\x3\x2\x2\x2$%\x3\x2\x2\x2%&\a\x2\x2\x3&\x3\x3\x2"+
		"\x2\x2\'/\x5\x6\x4\x2(/\x5\b\x5\x2)/\x5\n\x6\x2*/\x5\f\a\x2+/\x5\xE\b"+
		"\x2,/\x5\x10\t\x2-/\x5\x12\n\x2.\'\x3\x2\x2\x2.(\x3\x2\x2\x2.)\x3\x2\x2"+
		"\x2.*\x3\x2\x2\x2.+\x3\x2\x2\x2.,\x3\x2\x2\x2.-\x3\x2\x2\x2/\x5\x3\x2"+
		"\x2\x2\x30\x31\a\x1A\x2\x2\x31\x32\a#\x2\x2\x32\x34\a\x14\x2\x2\x33\x35"+
		"\x5\x1E\x10\x2\x34\x33\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x36\x3\x2\x2"+
		"\x2\x36\x37\a\x15\x2\x2\x37\x38\a\x18\x2\x2\x38\x39\x5\x14\v\x2\x39\a"+
		"\x3\x2\x2\x2:;\a\x1B\x2\x2;<\x5\x16\f\x2<=\a\x18\x2\x2=>\x5\x14\v\x2>"+
		"?\a\x1C\x2\x2?@\a\x18\x2\x2@\x41\x5\x14\v\x2\x41\t\x3\x2\x2\x2\x42\x43"+
		"\a\x1D\x2\x2\x43\x44\x5\x16\f\x2\x44\x45\a\x18\x2\x2\x45\x46\x5\x14\v"+
		"\x2\x46\v\x3\x2\x2\x2GH\a \x2\x2HI\a#\x2\x2IJ\a!\x2\x2JK\x5\x16\f\x2K"+
		"L\a\x18\x2\x2LM\x5\x14\v\x2M\r\x3\x2\x2\x2NO\a\x1E\x2\x2OP\x5\x16\f\x2"+
		"P\xF\x3\x2\x2\x2QR\a\x1F\x2\x2RS\x5\x16\f\x2S\x11\x3\x2\x2\x2TU\a#\x2"+
		"\x2UV\a\r\x2\x2VW\x5\x16\f\x2W\x13\x3\x2\x2\x2XZ\a\x3\x2\x2Y[\x5\x4\x3"+
		"\x2ZY\x3\x2\x2\x2[\\\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\x3\x2"+
		"\x2\x2^_\a\x4\x2\x2_\x15\x3\x2\x2\x2`\x63\x5\x18\r\x2\x61\x62\t\x2\x2"+
		"\x2\x62\x64\x5\x18\r\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x17"+
		"\x3\x2\x2\x2\x65j\x5\x1A\xE\x2\x66g\t\x3\x2\x2gi\x5\x1A\xE\x2h\x66\x3"+
		"\x2\x2\x2il\x3\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2k\x19\x3\x2\x2\x2l"+
		"j\x3\x2\x2\x2mr\x5\x1C\xF\x2no\t\x4\x2\x2oq\x5\x1C\xF\x2pn\x3\x2\x2\x2"+
		"qt\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2s\x1B\x3\x2\x2\x2tr\x3\x2\x2"+
		"\x2u~\a$\x2\x2v~\a%\x2\x2w~\a&\x2\x2x~\a#\x2\x2yz\a\x14\x2\x2z{\x5\x16"+
		"\f\x2{|\a\x15\x2\x2|~\x3\x2\x2\x2}u\x3\x2\x2\x2}v\x3\x2\x2\x2}w\x3\x2"+
		"\x2\x2}x\x3\x2\x2\x2}y\x3\x2\x2\x2~\x1D\x3\x2\x2\x2\x7F\x84\a#\x2\x2\x80"+
		"\x81\a\x19\x2\x2\x81\x83\a#\x2\x2\x82\x80\x3\x2\x2\x2\x83\x86\x3\x2\x2"+
		"\x2\x84\x82\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x1F\x3\x2\x2\x2\x86\x84"+
		"\x3\x2\x2\x2\v#.\x34\\\x63jr}\x84";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniPython
