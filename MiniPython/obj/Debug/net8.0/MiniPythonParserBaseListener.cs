//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/fabs/RiderProjects/MiniPython/MiniPython/MiniPythonParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniPython {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniPythonParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniPythonParserBaseListener : IMiniPythonParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] MiniPythonParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] MiniPythonParser.ProgramContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] MiniPythonParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] MiniPythonParser.StatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.defStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefStatement([NotNull] MiniPythonParser.DefStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.defStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefStatement([NotNull] MiniPythonParser.DefStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] MiniPythonParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] MiniPythonParser.IfStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] MiniPythonParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] MiniPythonParser.WhileStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] MiniPythonParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] MiniPythonParser.ForStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] MiniPythonParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] MiniPythonParser.ReturnStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.printStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrintStatement([NotNull] MiniPythonParser.PrintStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.printStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrintStatement([NotNull] MiniPythonParser.PrintStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.assignStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignStatement([NotNull] MiniPythonParser.AssignStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.assignStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignStatement([NotNull] MiniPythonParser.AssignStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] MiniPythonParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] MiniPythonParser.BlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] MiniPythonParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] MiniPythonParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.additionExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditionExpression([NotNull] MiniPythonParser.AdditionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.additionExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditionExpression([NotNull] MiniPythonParser.AdditionExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.multiplicationExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicationExpression([NotNull] MiniPythonParser.MultiplicationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.multiplicationExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicationExpression([NotNull] MiniPythonParser.MultiplicationExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimaryExpression([NotNull] MiniPythonParser.PrimaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimaryExpression([NotNull] MiniPythonParser.PrimaryExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniPythonParser.argList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgList([NotNull] MiniPythonParser.ArgListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniPythonParser.argList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgList([NotNull] MiniPythonParser.ArgListContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace MiniPython
